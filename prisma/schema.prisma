generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  TEACHER
  STUDENT
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
}

enum PaymentType {
  MATERIAL
  LESSON_SESSION
}

enum NotificationStatus {
  UNREAD
  READ
}

model User {
  id                  String             @id @default(cuid())
  email               String             @unique
  password            String?
  full_name           String
  role                UserRole
  profile_picture     String?
  phone               String?
  is_email_verified   Boolean            @default(false)
  verification_status VerificationStatus @default(PENDING)
  google_id           String?            @unique
  created_at          DateTime           @default(now())
  updated_at          DateTime           @updatedAt
  otp_codes           OtpCode[]
  teacher_profile     TeacherProfile?
  materials           Material[]
  received_reviews    Review[]           @relation("TeacherReviews")
  teacher_chats       Chat[]             @relation("TeacherChats")
  created_quizzes     Quiz[]
  student_profile     StudentProfile?
  given_reviews       Review[]           @relation("StudentReviews")
  student_chats       Chat[]             @relation("StudentChats")
  payments            Payment[]
  quiz_attempts       QuizAttempt[]
  notifications       Notification[]
  created_categories  Category[]

  @@map("users")
}

model OtpCode {
  id         String   @id @default(cuid())
  user_id    String
  code       String
  expires_at DateTime
  is_used    Boolean  @default(false)
  created_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("otp-codes")
}

model TeacherProfile {
  id            String   @id @default(cuid())
  user_id       String   @unique
  bio           String?
  experience    Int?
  education     String?
  subjects      String[]
  rating        Float    @default(0)
  total_reviews Int      @default(0)
  total_courses Int      @default(0)
  is_active     Boolean  @default(true)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("teacher-profiles")
}

model StudentProfile {
  id         String   @id @default(cuid())
  user_id    String   @unique
  grade      String?
  school     String?
  interests  String[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("student-profiles")
}

model Category {
  id            String     @id @default(cuid())
  name          String     @unique
  description   String?
  created_by_id String
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  materials     Material[]
  created_by    User       @relation(fields: [created_by_id], references: [id])

  @@map("categories")
}

model Material {
  id          String    @id @default(cuid())
  title       String
  description String
  content     String
  price       Int
  category_id String
  teacher_id  String
  thumbnail   String?
  file_url    String?
  duration    Int?
  level       String?
  is_active   Boolean   @default(true)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  category    Category  @relation(fields: [category_id], references: [id])
  teacher     User      @relation(fields: [teacher_id], references: [id])
  payments    Payment[]
  quizzes     Quiz[]

  @@map("materials")
}

model Chat {
  id         String   @id @default(cuid())
  message    String
  teacher_id String
  student_id String
  is_read    Boolean  @default(false)
  created_at DateTime @default(now())
  teacher    User     @relation("TeacherChats", fields: [teacher_id], references: [id])
  student    User     @relation("StudentChats", fields: [student_id], references: [id])

  @@map("chats")
}

model Notification {
  id         String             @id @default(cuid())
  user_id    String
  title      String
  message    String
  type       String
  status     NotificationStatus @default(UNREAD)
  created_at DateTime           @default(now())
  user       User               @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Payment {
  id              String        @id @default(cuid())
  user_id         String
  material_id     String?
  amount          Int
  type            PaymentType
  status          PaymentStatus @default(PENDING)
  midtrans_id     String?
  midtrans_status String?
  payment_method  String?
  paid_at         DateTime?
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  user            User          @relation(fields: [user_id], references: [id])
  material        Material?     @relation(fields: [material_id], references: [id])

  @@map("payments")
}

model Review {
  id         String   @id @default(cuid())
  teacher_id String
  student_id String
  rating     Int
  comment    String?
  created_at DateTime @default(now())
  teacher    User     @relation("TeacherReviews", fields: [teacher_id], references: [id])
  student    User     @relation("StudentReviews", fields: [student_id], references: [id])

  @@unique([teacher_id, student_id])
  @@map("reviews")
}

model Quiz {
  id              String         @id @default(cuid())
  title           String
  description     String?
  material_id     String
  teacher_id      String
  time_limit      Int?
  total_questions Int            @default(0)
  is_active       Boolean        @default(true)
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt
  material        Material       @relation(fields: [material_id], references: [id])
  teacher         User           @relation(fields: [teacher_id], references: [id])
  questions       QuizQuestion[]
  attempts        QuizAttempt[]

  @@map("quizzes")
}

model QuizQuestion {
  id             String              @id @default(cuid())
  quiz_id        String
  question       String
  option_a       String
  option_b       String
  option_c       String
  option_d       String
  correct_answer String
  explanation    String?
  created_at     DateTime            @default(now())
  quiz           Quiz                @relation(fields: [quiz_id], references: [id], onDelete: Cascade)
  answers        QuizAttemptAnswer[]

  @@map("quiz-questions")
}

model QuizAttempt {
  id              String              @id @default(cuid())
  quiz_id         String
  user_id         String
  score           Int                 @default(0)
  total_questions Int                 @default(0)
  correct_answers Int                 @default(0)
  started_at      DateTime            @default(now())
  completed_at    DateTime?
  quiz            Quiz                @relation(fields: [quiz_id], references: [id])
  user            User                @relation(fields: [user_id], references: [id])
  answers         QuizAttemptAnswer[]

  @@map("quiz-attempts")
}

model QuizAttemptAnswer {
  id          String       @id @default(cuid())
  attempt_id  String
  question_id String
  user_answer String
  is_correct  Boolean
  attempt     QuizAttempt  @relation(fields: [attempt_id], references: [id], onDelete: Cascade)
  question    QuizQuestion @relation(fields: [question_id], references: [id])

  @@unique([attempt_id, question_id])
  @@map("quiz-attempt-answers")
}
