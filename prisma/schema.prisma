// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum untuk role pengguna
enum UserRole {
  TEACHER
  STUDENT
}

// Enum untuk status verifikasi
enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

// Enum untuk status pembayaran
enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
}

// Enum untuk tipe pembayaran
enum PaymentType {
  MATERIAL
  LESSON_SESSION
}

// Enum untuk status notifikasi
enum NotificationStatus {
  UNREAD
  READ
}

// Model utama untuk pengguna (guru dan siswa)
model User {
  id                  String             @id @default(cuid())
  email               String             @unique
  password            String? // Password bisa null untuk login dengan Google
  full_name           String
  role                UserRole
  profile_picture     String?
  phone               String?
  is_email_verified   Boolean            @default(false)
  verification_status VerificationStatus @default(PENDING)
  google_id           String?            @unique // ID unik dari Google OAuth
  created_at          DateTime           @default(now())
  updated_at          DateTime           @updatedAt

  // Relasi untuk OTP verifikasi email
  otp_codes OtpCode[]

  // Relasi khusus untuk guru
  teacher_profile  TeacherProfile?
  materials        Material[] // Materi yang dibuat guru
  received_reviews Review[]        @relation("TeacherReviews") // Review yang diterima guru
  teacher_chats    Chat[]          @relation("TeacherChats") // Chat sebagai guru
  created_quizzes  Quiz[] // Quiz yang dibuat guru

  // Relasi khusus untuk siswa
  student_profile StudentProfile?
  given_reviews   Review[]        @relation("StudentReviews") // Review yang diberikan siswa
  student_chats   Chat[]          @relation("StudentChats") // Chat sebagai siswa
  payments        Payment[] // Riwayat pembayaran siswa
  quiz_attempts   QuizAttempt[] // Percobaan mengerjakan quiz
  notifications   Notification[]

  @@map("users")
}

// Model untuk kode OTP verifikasi email
model OtpCode {
  id         String   @id @default(cuid())
  user_id    String
  code       String // Kode OTP 6 digit
  expires_at DateTime // Waktu kadaluarsa OTP
  is_used    Boolean  @default(false) // Status apakah OTP sudah digunakan
  created_at DateTime @default(now())

  // Relasi ke user
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("otp-codes")
}

// Model profil khusus guru
model TeacherProfile {
  id            String   @id @default(cuid())
  user_id       String   @unique
  bio           String? // Biografi guru
  experience    Int? // Pengalaman mengajar dalam tahun
  education     String? // Latar belakang pendidikan
  subjects      String[] // Mata pelajaran yang diajar
  rating        Float    @default(0) // Rating rata-rata dari siswa
  total_reviews Int      @default(0) // Total jumlah review
  total_courses Int      @default(0) // Total course yang telah dibuat
  is_active     Boolean  @default(true) // Status aktif mengajar
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relasi ke user
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("teacher-profiles")
}

// Model profil khusus siswa
model StudentProfile {
  id         String   @id @default(cuid())
  user_id    String   @unique
  grade      String? // Kelas atau tingkatan pendidikan
  school     String? // Nama sekolah atau institusi
  interests  String[] // Minat atau bidang yang diminati
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relasi ke user
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("student-profiles")
}

// Model untuk kategori materi pembelajaran
model Category {
  id          String   @id @default(cuid())
  name        String   @unique // Nama kategori (misal: Matematika, Fisika)
  description String? // Deskripsi kategori
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relasi ke materi
  materials Material[]

  @@map("categories")
}

// Model untuk materi pembelajaran (course)
model Material {
  id          String   @id @default(cuid())
  title       String // Judul materi
  description String // Deskripsi materi
  content     String // Konten materi dalam format teks/HTML
  price       Int // Harga course dalam rupiah
  category_id String
  teacher_id  String
  thumbnail   String? // URL gambar thumbnail
  file_url    String? // URL file attachment (PDF, video, dll)
  duration    Int? // Estimasi durasi belajar dalam menit
  level       String? // Tingkat kesulitan: beginner, intermediate, advanced
  is_active   Boolean  @default(true) // Status publikasi materi
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relasi ke kategori dan guru
  category Category @relation(fields: [category_id], references: [id])
  teacher  User     @relation(fields: [teacher_id], references: [id])

  // Relasi ke pembayaran dan quiz
  payments Payment[] // Pembayaran untuk materi ini
  quizzes  Quiz[] // Quiz yang terkait dengan materi ini

  @@map("materials")
}

// Model untuk live chat real-time antara guru dan siswa
model Chat {
  id         String   @id @default(cuid())
  message    String // Isi pesan chat
  teacher_id String
  student_id String
  is_read    Boolean  @default(false) // Status apakah pesan sudah dibaca
  created_at DateTime @default(now())

  // Relasi ke guru dan siswa
  teacher User @relation("TeacherChats", fields: [teacher_id], references: [id])
  student User @relation("StudentChats", fields: [student_id], references: [id])

  @@map("chats")
}

// Model untuk sistem notifikasi
model Notification {
  id         String             @id @default(cuid())
  user_id    String
  title      String // Judul notifikasi
  message    String // Isi pesan notifikasi
  type       String // Tipe notifikasi: PROMO, UPDATE, PAYMENT, dll
  status     NotificationStatus @default(UNREAD)
  created_at DateTime           @default(now())

  // Relasi ke user
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Model untuk pembayaran via Midtrans
model Payment {
  id              String        @id @default(cuid())
  user_id         String
  material_id     String?
  amount          Int // Jumlah pembayaran dalam rupiah
  type            PaymentType // Tipe pembayaran
  status          PaymentStatus @default(PENDING)
  midtrans_id     String? // Transaction ID dari Midtrans
  midtrans_status String? // Status dari Midtrans
  payment_method  String? // Metode pembayaran (Credit Card, Bank Transfer, dll)
  paid_at         DateTime? // Waktu pembayaran berhasil
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt

  // Relasi ke user dan materi
  user     User      @relation(fields: [user_id], references: [id])
  material Material? @relation(fields: [material_id], references: [id])

  @@map("payments")
}

// Model untuk review dan rating guru
model Review {
  id         String   @id @default(cuid())
  teacher_id String
  student_id String
  rating     Int // Rating 1-5 bintang
  comment    String? // Komentar review (opsional)
  created_at DateTime @default(now())

  // Relasi ke guru dan siswa
  teacher User @relation("TeacherReviews", fields: [teacher_id], references: [id])
  student User @relation("StudentReviews", fields: [student_id], references: [id])

  // Satu siswa hanya bisa review satu guru sekali
  @@unique([teacher_id, student_id])
  @@map("reviews")
}

// Model untuk quiz interaktif
model Quiz {
  id              String   @id @default(cuid())
  title           String // Judul quiz
  description     String? // Deskripsi quiz
  material_id     String // Quiz terkait dengan materi tertentu
  teacher_id      String
  time_limit      Int? // Batas waktu mengerjakan dalam menit
  total_questions Int      @default(0) // Total jumlah pertanyaan
  is_active       Boolean  @default(true) // Status publikasi quiz
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  // Relasi ke materi dan guru
  material Material @relation(fields: [material_id], references: [id])
  teacher  User     @relation(fields: [teacher_id], references: [id])

  // Relasi ke pertanyaan dan percobaan
  questions QuizQuestion[] // Pertanyaan dalam quiz
  attempts  QuizAttempt[] // Percobaan mengerjakan quiz

  @@map("quizzes")
}

// Model untuk pertanyaan dalam quiz
model QuizQuestion {
  id             String   @id @default(cuid())
  quiz_id        String
  question       String // Soal pertanyaan
  option_a       String // Pilihan jawaban A
  option_b       String // Pilihan jawaban B
  option_c       String // Pilihan jawaban C
  option_d       String // Pilihan jawaban D
  correct_answer String // Jawaban yang benar: A, B, C, atau D
  explanation    String? // Penjelasan jawaban yang benar
  created_at     DateTime @default(now())

  // Relasi ke quiz
  quiz Quiz @relation(fields: [quiz_id], references: [id], onDelete: Cascade)

  // Relasi ke jawaban percobaan
  answers QuizAttemptAnswer[]

  @@map("quiz-questions")
}

// Model untuk percobaan mengerjakan quiz
model QuizAttempt {
  id              String    @id @default(cuid())
  quiz_id         String
  user_id         String
  score           Int       @default(0) // Skor yang diperoleh
  total_questions Int       @default(0) // Total pertanyaan yang dijawab
  correct_answers Int       @default(0) // Jumlah jawaban yang benar
  started_at      DateTime  @default(now()) // Waktu mulai mengerjakan
  completed_at    DateTime? // Waktu selesai mengerjakan

  // Relasi ke quiz dan user
  quiz Quiz @relation(fields: [quiz_id], references: [id])
  user User @relation(fields: [user_id], references: [id])

  // Relasi ke jawaban
  answers QuizAttemptAnswer[] // Jawaban untuk setiap pertanyaan

  @@map("quiz-attempts")
}

// Model untuk jawaban dalam setiap percobaan quiz
model QuizAttemptAnswer {
  id          String  @id @default(cuid())
  attempt_id  String
  question_id String
  user_answer String // Jawaban yang dipilih user: A, B, C, atau D
  is_correct  Boolean // Status apakah jawaban benar atau salah

  // Relasi ke percobaan dan pertanyaan
  attempt  QuizAttempt  @relation(fields: [attempt_id], references: [id], onDelete: Cascade)
  question QuizQuestion @relation(fields: [question_id], references: [id])

  // Satu pertanyaan per percobaan hanya bisa dijawab sekali
  @@unique([attempt_id, question_id])
  @@map("quiz-attempt-answers")
}
